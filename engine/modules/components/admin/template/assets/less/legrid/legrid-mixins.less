// FLEXBOX MIXINS
// --------------------------------------------------
// Flexbox LESS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// @see https://gist.github.com/jayj/4012969
// --------------------------------------------------

// Flexbox display
// flex or inline-flex
.flex-display(@display: flex) {
	display: ~"-webkit-@{display}";
	display: ~"-ms-@{display}box"; // IE10 uses -ms-flexbox
	display: ~"-ms-@{display}"; // IE11
	display: @display;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
.flex(@columns: initial) {
  -webkit-flex: @columns;
      -ms-flex: @columns;
          flex: @columns;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
.flex-direction(@direction: row) {
  -webkit-flex-direction: @direction;
      -ms-flex-direction: @direction;
          flex-direction: @direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
.flex-wrap(@wrap: nowrap) {
  -webkit-flex-wrap: @wrap;
      -ms-flex-wrap: @wrap;
          flex-wrap: @wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
.flex-flow(@flow) {
  -webkit-flex-flow: @flow;
      -ms-flex-flow: @flow;
          flex-flow: @flow;
}

// Display Order
// - applies to: flex items
// <integer>
.order(@order: 0) {
  -webkit-order: @order;
      -ms-order: @order;
          order: @order;
}

// Flex grow factor
// - applies to: flex items
// <number>
.flex-grow(@grow: 0) {
  -webkit-flex-grow: @grow;
      -ms-flex-grow: @grow;
          flex-grow: @grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
.flex-shrink(@shrink: 1) {
  -webkit-flex-shrink: @shrink;
      -ms-flex-shrink: @shrink;
          flex-shrink: @shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
.flex-basis(@width: auto) {
  -webkit-flex-basis: @width;
      -ms-flex-basis: @width;
          flex-basis: @width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
.justify-content(@justify: flex-start) {
  -webkit-justify-content: @justify;
      -ms-justify-content: @justify;
          justify-content: @justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
.align-content(@align: stretch) {
  -webkit-align-content: @align;
      -ms-align-content: @align;
          align-content: @align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
.align-items(@align: stretch) {
  -webkit-align-items: @align;
      -ms-align-items: @align;
          align-items: @align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
.align-self(@align: auto) {
  -webkit-align-self: @align;
      -ms-align-self: @align;
          align-self: @align;
}


.box-sizing(@type : border-box) {
  -webkit-box-sizing: @type;
  -moz-box-sizing: @type;
  box-sizing: @type;
}


// GRID MIXINS
// .for
.for(@i, @n) {
	.-each(@i)
}
.for(@n) when (isnumber(@n)) {
	.for(1, @n)
}
.for(@i, @n) when not (@i = @n){
	.for((@i + (@n - @i) / abs(@n - @i)), @n);
}

// .for-each
.for-each(@array) when (default()) {
	.for-impl_(length(@array))
}
.for-impl_(@i) when (@i > 1){
	.for-impl_((@i - 1))
}
.for-impl_(@i) when (@i > 0) {
	.-each(extract(@array, @i))
}

.content-reverse() {
	.flex-direction(~"row-reverse");
	.flex-wrap(~"wrap-reverse");
}

.col-reverse() {
	.flex-direction(~"column-reverse");
	.flex-wrap(~"wrap-reverse");
}
.makeColPadding(@padding) {
	.col {
		padding-right: @padding / 2;
		padding-left: @padding / 2;
	}
}

.makegrid(@class) {
	.col@{class}auto {
		.flex-grow(1);
		.flex-basis(0);
		max-width: 100%;
	}

	.make-cols(@class);
	.make-offsets(@class);
}

.make-column(@class; @col-number) {
	@width: ((100% / @columns) * @col-number);
	
	.col@{class}@{col-number} {
		.flex-basis(@width);
		max-width: @width;
	}
}

.make-column-min-width(@class; @col-number) {
	@width: ((100% / @columns) * @col-number);
	
	.col@{class}min-@{col-number} {
		min-width: @width;
	}
}

.make-cols(@class; @col-number: @columns) when (@col-number > 0) {
	.make-cols(@class; (@col-number - 1));
	.make-column(@class; @col-number);
	.make-column-min-width(@class; @col-number);
}

.make-offset(@class; @col-number) {
	.col@{class}left-@{col-number} {
		margin-left: ((100% / @columns) * @col-number);
	}
}

.make-offsets(@class; @col-number: (@columns - 1)) when (@col-number > 0) {
	.make-offsets(@class; (@col-number - 1));
	.make-offset(@class; @col-number);
}

.make-position-class(@class) {

	.col@{class}start {
		.justify-content(~"flex-start");
		text-align: start;
	}
	.col@{class}center {
		.justify-content(~"center");
		text-align: center;
	}
	.col@{class}end {
		.justify-content(~"flex-end");
		text-align: end;
	}
	.col@{class}top {
		.align-items(~"flex-start");
	}
	.col@{class}middle {
		.align-items(~"center");
	}
	.col@{class}bottom {
		.align-items(~"flex-end");
	}
	.col@{class}around {
		.justify-content(~"space-around");
	}
	.col@{class}between {
		.justify-content(~"space-between");
	}
	.col@{class}first {
		.order(-1);
	}
	.col@{class}last {
		.order(1);
	}
}