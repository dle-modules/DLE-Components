<?php

/**
 * Класс взят отсюда и немного доработан под dle  https://github.com/flexocms/flexo1.source/blob/master/cms/helpers/Pager.php
 * Simple Pager helper based on the Kohana pagination helper.
 *
 * @author     Maslakov Alexander <jmas.ukraine@gmail.com>
 * @author     Kohana helper
 * @author     Pavel Belousov <pafnuty10@gmail.com>
 * @license    http://kohanaphp.com/license.html
 */
class Pager {
	// Link templates
	protected $link_tag         = '<span data-page-num=":link">:name</span>';
	protected $current_tag      = '<span class="current">:name</span>';
	protected $prev_tag         = '<span data-page-num=":link" class="prev">&lsaquo; Назад</span>';
	protected $prev_text_tag    = '<span class="prev">&lsaquo; Назад</span>';
	protected $next_tag         = '<span data-page-num=":link" class="next">Далее &rsaquo;</span>';
	protected $next_text_tag    = '<span class="next">Далее &rsaquo;</span>';
	protected $first_tag        = '<span data-page-num=":link" class="first">Первая &laquo;</span>';
	protected $last_tag         = '<span data-page-num=":link" class="last">&raquo; Последняя</span>';
	protected $extended_pageof  = 'Страница :current_page из :total_pages';
	protected $extended_itemsof = 'Показаны новости :current_first_item &mdash; :current_last_item из :total_items';

	// Config values
	protected $items_per_page     = 10;
	protected $total_items        = 0;
	protected $query_string       = 'pageNum';
	protected $style              = 'classic';
	protected $block_id           = 'bp-pager';
	protected $css_class          = 'bp-pager';
	protected $is_default_dle_get = false;

	// Autogenerated values
	protected $url;
	protected $current_page;
	protected $total_pages;
	protected $current_first_item;
	protected $current_last_item;
	protected $first_page;
	protected $last_page;
	protected $previous_page;
	protected $next_page;

	/**
	 * Constructs a new Pager object.
	 *
	 * @param array $config configuration settings
	 *
	 * @return \Pager
	 */
	function __construct($config = []) {
		$this->initialize($config);
	}

	/**
	 * Sets config values.
	 *
	 * @param   array  $config settings
	 *
	 * @return  void
	 */
	function initialize($config = []) {
		foreach ($config as $key => $value) {
			if (property_exists($this, $key)) {
				$this->$key = $value;
			}
		}

		$this->total_items = (int) max(0, $this->total_items);

		// Extract current page
		if ($this->current_page == NULL) {
			$this->current_page = isset($_GET[$this->query_string]) ? (int) $_GET[$this->query_string] : 1;
		}

		// Insert {page} placeholder
		$_GET[$this->query_string] = '{page}';

		// Create full URL
		if ($this->url == NULL) {
			$this->url = '{page}';
		}

		// Reset page number
		$_GET[$this->query_string] = $this->current_page;

		if ($this->is_default_dle_get) {
			$this->url = str_replace('/page/' . $this->current_page . '/', '', $_SERVER['REQUEST_URI']) . '/page/' . '{page}/';
			$this->url = str_replace('//', '/', $this->url);
		}

		$this->items_per_page     = (int) max(1, $this->items_per_page);
		$this->total_pages        = (int) ceil($this->total_items / $this->items_per_page);
		$this->current_page       = (int) min(max(1, $this->current_page), max(1, $this->total_pages));
		$this->current_first_item = (int) min((($this->current_page - 1) * $this->items_per_page) + 1, $this->total_items);
		$this->current_last_item  = (int) min($this->current_first_item + $this->items_per_page - 1, $this->total_items);

		$this->first_page    = ($this->current_page === 1) ? false : 1;
		$this->last_page     = ($this->current_page >= $this->total_pages) ? false : $this->total_pages;
		$this->previous_page = ($this->current_page > 1) ? $this->current_page - 1 : false;
		$this->next_page     = ($this->current_page < $this->total_pages) ? $this->current_page + 1 : false;

	}

	/**
	 * Generates the HTML for the chosen pagination style.
	 *
	 * @return  string  pagination html
	 */
	public function render() {
		$out = '<div data-block-id="' . $this->block_id . '" class="' . $this->css_class . '">' . "\n";

		switch ($this->style) {
			// << First  < 1 2 3 >  Last >>
			case 'classic':
			default:

				if ($this->first_page) {
					$out .= str_replace(':link', str_replace('{page}', 1, $this->url), $this->first_tag) . "\n";
				}

				if ($this->previous_page) {
					$out .= str_replace(':link', str_replace('{page}', $this->previous_page, $this->url), $this->prev_tag) . "\n";
				}

				for ($i = 1; $i <= $this->total_pages; $i++) {
					if ($i == $this->current_page) {
						$out .= str_replace(':name', $i, $this->current_tag) . "\n";
					} else {
						$out .= str_replace([':link', ':name'], [str_replace('{page}', $i, $this->url), $i], $this->link_tag) . "\n";
					}
				}

				if ($this->next_page) {
					$out .= str_replace(':link', str_replace('{page}', $this->next_page, $this->url), $this->next_tag) . "\n";
				}

				if ($this->last_page) {
					$out .= str_replace(':link', str_replace('{page}', $this->last_page, $this->url), $this->last_tag) . "\n";
				}

				break;

			// << Previous  1 2 ... 5 6 7 8 9 10 11 12 13 14 ... 25 26  Next >>
			case 'digg':

				if ($this->previous_page) {
					$out .= str_replace(':link', str_replace('{page}', $this->previous_page, $this->url), $this->prev_tag) . "\n";
				}

				if ($this->total_pages < 13) /* << Previous  1 2 3 4 5 6 7 8 9 10 11 12  Next >> */ {
					for ($i = 1; $i <= $this->total_pages; $i++) {
						if ($i == $this->current_page) {
							$out .= str_replace(':name', $i, $this->current_tag) . "\n";
						} else {
							$out .= str_replace([':link', ':name'], [str_replace('{page}', $i, $this->url), $i], $this->link_tag) . "\n";
						}
					}
				} elseif ($this->current_page < 9) /* << Previous  1 2 3 4 5 6 7 8 9 10 ... 25 26  Next >> */ {
					for ($i = 1; $i <= 10; $i++) {
						if ($i == $this->current_page) {
							$out .= str_replace(':name', $i, $this->current_tag) . "\n";
						} else {
							$out .= str_replace([':link', ':name'], [str_replace('{page}', $i, $this->url), $i], $this->link_tag) . "\n";
						}
					}

					$out .= '&hellip;' . "\n";

					$out .= str_replace([':link', ':name'], [str_replace('{page}', $this->total_pages - 1, $this->url), $this->total_pages - 1], $this->link_tag) . "\n";
					$out .= str_replace([':link', ':name'], [str_replace('{page}', $this->total_pages, $this->url), $this->total_pages], $this->link_tag) . "\n";
				} elseif ($this->current_page > $this->total_pages - 8) /* << Previous  1 2 ... 17 18 19 20 21 22 23 24 25 26  Next >> */ {
					$out .= str_replace([':link', ':name'], [str_replace('{page}', 1, $this->url), 1], $this->link_tag) . "\n";
					$out .= str_replace([':link', ':name'], [str_replace('{page}', 2, $this->url), 2], $this->link_tag) . "\n";

					$out .= '&hellip;' . "\n";

					for ($i = $this->total_pages - 9; $i <= $this->total_pages; $i++) {
						if ($i == $this->current_page) {
							$out .= str_replace(':name', $i, $this->current_tag) . "\n";
						} else {
							$out .= str_replace([':link', ':name'], [str_replace('{page}', $i, $this->url), $i], $this->link_tag) . "\n";
						}
					}
				} else /* << Previous  1 2 ... 5 6 7 8 9 10 11 12 13 14 ... 25 26  Next >> */{

					$out .= str_replace([':link', ':name'], [str_replace('{page}', 1, $this->url), 1], $this->link_tag) . "\n";
					$out .= str_replace([':link', ':name'], [str_replace('{page}', 2, $this->url), 2], $this->link_tag) . "\n";

					$out .= '&hellip;' . "\n";

					for ($i = $this->current_page - 5; $i <= $this->current_page + 5; $i++) {
						if ($i == $this->current_page) {
							$out .= str_replace(':name', $i, $this->current_tag) . "\n";
						} else {
							$out .= str_replace([':link', ':name'], [str_replace('{page}', $i, $this->url), $i], $this->link_tag) . "\n";
						}
					}

					$out .= '&hellip;' . "\n";

					$out .= str_replace([':link', ':name'], [str_replace('{page}', $this->total_pages - 1, $this->url), $this->total_pages - 1], $this->link_tag) . "\n";
					$out .= str_replace([':link', ':name'], [str_replace('{page}', $this->total_pages, $this->url), $this->total_pages], $this->link_tag) . "\n";
				}

				if ($this->next_page) {
					$out .= str_replace(':link', str_replace('{page}', $this->next_page, $this->url), $this->next_tag) . "\n";
				}

				break;

			// << Previous | Page 2 of 11 | Showing items 6-10 of 52 | Next >>
			case 'extended':

				if ($this->previous_page) {
					$out .= str_replace(':link', str_replace('{page}', $this->previous_page, $this->url), $this->prev_tag) . "\n";
				} else {
					$out .= $this->prev_text_tag;
				}

				$out .= ' <span class="vertical">|</span> ' . str_replace([':current_page', ':total_pages'], [$this->current_page, $this->total_pages], $this->extended_pageof) .
				' <span class="vertical">|</span> ' . str_replace([':current_first_item', ':current_last_item', ':total_items'], [$this->current_first_item, $this->current_last_item, $this->total_items], $this->extended_itemsof) .
					' <span class="vertical">|</span> ' . "\n";

				if ($this->next_page) {
					$out .= str_replace(':link', str_replace('{page}', $this->next_page, $this->url), $this->next_tag) . "\n";
				} else {
					$out .= $this->next_text_tag;
				}

				break;

			// < Previous  Next >
			case 'arrows':

				if ($this->previous_page) {
					$out .= str_replace(':link', str_replace('{page}', $this->previous_page, $this->url), $this->prev_tag) . "\n";
				} else {
					$out .= $this->prev_text_tag;
				}

				if ($this->next_page) {
					$out .= str_replace(':link', str_replace('{page}', $this->next_page, $this->url), $this->next_tag) . "\n";
				} else {
					$out .= $this->next_text_tag;
				}

				break;

			// Pages: 1 ... 4 5 6 7 8 ... 15
			case 'punbb':

				if ($this->current_page > 3) {
					$out .= str_replace([':link', ':name'], [str_replace('{page}', 1, $this->url), 1], $this->link_tag) . "\n";
					if ($this->current_page != 4) {
						$out .= '&hellip;' . "\n";
					}
				}

				for ($i = $this->current_page - 2, $stop = $this->current_page + 3; $i < $stop; ++$i) {
					if ($i < 1 OR $i > $this->total_pages) {
						continue;
					}

					if ($this->current_page == $i) {
						$out .= str_replace(':name', $i, $this->current_tag) . "\n";
					} else {
						$out .= str_replace([':link', ':name'], [str_replace('{page}', $i, $this->url), $i], $this->link_tag) . "\n";
					}

				}

				if ($this->current_page <= $this->total_pages - 3) {
					if ($this->current_page != $this->total_pages - 3) {
						$out .= '&hellip;' . "\n";
					}
					$out .= str_replace([':link', ':name'], [str_replace('{page}', $this->total_pages, $this->url), $this->total_pages], $this->link_tag) . "\n";
				}

				break;

		}

		$out .= '</div>' . "\n";

		if ($this->is_default_dle_get) {
			$out = str_replace('/page/1/', '/', $out);
		}

		return $out;
	}

	/**
	 * Magically converts Pagination object to string.
	 *
	 * @return  string  Pager html
	 */
	/**
	 * @return string
	 */
	public function __toString() {
		return $this->render();
	}

	/**
	 * Magically gets a pagination variable.
	 *
	 * @param   string  $key key
	 *
	 * @return  mixed   variable value if the key is found
	 * @return  void    if the key is not found
	 */
	public function __get($key) {
		if (isset($this->$key)) {
			return $this->$key;
		}
		return false;
	}

	/**
	 * Adds a secondary interface for accessing properties, e.g. $pager->total_pages().
	 * Note that $pagination->total_pages is the recommended way to access properties.
	 *
	 * @param      $func
	 * @param null $args
	 *
	 * @internal param \function $string name
	 *
	 * @return  string
	 */
	public function __call($func, $args = NULL) {
		return $this->__get($func);
	}

} // End Pager Class